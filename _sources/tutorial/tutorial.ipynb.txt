{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lennard Jones in the canonical ensemble\n",
    "\n",
    "In this example, we will reproduce the [average energy reported in the NIST SRSW](https://mmlapps.nist.gov/srs/LJ_PURE/mc.htm) at $T^*=0.9$ and $\\rho^*=0.009$ using a Monte Carlo simulation of a bulk Lennard Jones fluid.\n",
    "The simulation will be initialized with a desired number of particles in a cubic box, equilibrated while tuning the maximum trial displacement before obtaining the ensemble average energy.\n",
    "\n",
    "To begin, Python is used to generate a text file, `script.txt`, which is then input to the ```fst``` executable using the command ```fst < script.txt```.\n",
    "We recommend using Python to generate a text file, instead of manually editting a text file, for the following reasons:\n",
    "\n",
    " - Variables required by FEASST arguments may need to be converted from variables that the user prefers to input, and these FEASST arguments can then be generated by Python to machine precision. For example, if the user prefers to input temperature and state a temperature of $T^*=0.9$ in their manuscript, but FEASST requires $\\beta=\\frac{1}{k_B T}$, then $T^*=0.9$ is easier to input than $\\beta=1.111111111111111$.\n",
    " - Python generation of input files may create multiple related simulations from a single source. For example, the next tutorial shows how to simulate a range of densities.\n",
    " - Python provides formatted strings and argument parsing.\n",
    "\n",
    "In this example, we begin a simulation by defining a Python string `script`, where comments can be input for future reference, and a [MonteCarlo](../plugin/monte_carlo/doc/MonteCarlo_arguments.rst) object is created.\n",
    "Then, a random number generator is given a seed.\n",
    "The available arguments of [RandomMT19937](../plugin/math/doc/RandomMT19937_arguments.rst) can be found in the documentation of that object, or its base-class, [Random](../plugin/math/doc/Random_arguments.rst). \n",
    "Arguments of objects are separated by a space and are provided first as the name of the argument and then the value. In this case, `seed` is the argument name and `1572362164` is the argument value. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# FEASST version: v0.25.1\n",
      "MonteCarlo\n",
      "RandomMT19937 seed 1572362164  \n",
      "# initializing random number generator with seed: 1572362164\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# This and all tutorial code blocks are in Python.\n",
    "# Copy/paste or use the URL to find the code.\n",
    "# For example, https://pages.nist.gov/feasst/tutorial/tutorial.html is $HOME/feasst/tutorial/tutorial.ipynb . Usage: jupyter notebook tutorial.ipynb\n",
    "# And https://pages.nist.gov/feasst/tutorial/launch.html is $HOME/feasst/tutorial/launch.py . Usage: python launch.py\n",
    "\n",
    "import subprocess\n",
    "    \n",
    "script=\"\"\"\n",
    "# comments begin with the '#' symbol\n",
    "MonteCarlo\n",
    "RandomMT19937 seed 1572362164\n",
    "\"\"\"\n",
    "\n",
    "def run(script):\n",
    "    with open('script.txt', 'w') as file: file.write(script)\n",
    "    syscode = subprocess.call(\"../build/bin/fst < script.txt > script.log\", shell=True, executable='/bin/bash')\n",
    "    if syscode != 0:\n",
    "        print('syscode', syscode)\n",
    "        print('If you see \"/bin/bash: line 1: ../build/bin/fst: No such file or directory\" then either fst was not compiled or you need to change the path to fst in subprocess.call(...) two lines above.')\n",
    "    else:\n",
    "        with open('script.log', 'r') as file:\n",
    "            print(file.read())\n",
    "run(script)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The output of ```fst``` in ```script.log``` is displayed, and may be used to reproduce the simulation.\n",
    "It includes the FEASST version as well as a confirmation of the seed.\n",
    "The version shown may not match your version.\n",
    "\n",
    "If there is a typo in the arguments, this may result in an exception which will print to the terminal. You may test this now by changing the `seed` argument to `sd`. Because the argument `sd` is not recognized by [RandomMT19937](../plugin/math/doc/RandomMT19937_arguments.rst), a nonzero system code should be returned and a verbose error should appear in your terminal.\n",
    "\n",
    "The next step is to add a [Configuration](../plugin/configuration/doc/Configuration_arguments.rst).\n",
    "In this example, a simple cubic periodic box is defined based on the number of particles and density.\n",
    "Because the cubic length needs to be input to high precision, a Python format string is used to input a variable enclosed in curly brackets.\n",
    "\n",
    "In addition, the first particle type with an index of `0` is defined by the file `lj.fstprt`.\n",
    "Any argument value beginning with \"/feasst\" will have that beginning replaced with [feasst::install_dir()](../plugin/utils/doc/io.rst), and thus the full path to the file `lj.fstprt` is displayed in `script.log` shown below.\n",
    "See [Particle](../particle/README.rst) for more information about the format of the data file, which is a LAMMPS-inspired file with some major differences."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# FEASST version: v0.23.1-18-gb1bcd7c84e-dirty-user/234\n",
      "MonteCarlo\n",
      "RandomMT19937 seed 1572362164  \n",
      "# initializing random number generator with seed: 1572362164\n",
      "Configuration cubic_side_length 38.15714141844439 particle_type0 /home/user/feasst/particle/lj.fstprt  \n",
      " \n",
      " exit: 0\n"
     ]
    }
   ],
   "source": [
    "num_particles=500\n",
    "density=0.009\n",
    "script+=\"\"\"\n",
    "Configuration cubic_side_length {length} particle_type0 /feasst/particle/lj.fstprt\n",
    "\"\"\".format(length=(num_particles/density)**(1./3.))\n",
    "run(script)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Two [Potentials](../plugin/system/doc/Potential_arguments.rst) are introduced.\n",
    "First, the pair-wise [Lennard-Jones (LJ) model](../plugin/system/doc/LennardJones_arguments.rst).\n",
    "Because the domain is large compared to the potential cutoff, a [cell list](../plugin/system/doc/VisitModelCell_arguments.rst) is used.\n",
    "Second, [long-range corrections](../plugin/system/doc/LongRangeCorrections_arguments.rst), which approximately account for the cut off of the LJ potential by assuming a pair-wise radial distribution function of unity, are also initialized."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "script+=\"\"\"\n",
    "Potential Model LennardJones VisitModel VisitModelCell min_length max_cutoff\n",
    "Potential VisitModel LongRangeCorrections\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, set [ThermoParams](../plugin/system/doc/ThermoParams_arguments.rst), such as temperature and chemical potential of each particle type.\n",
    "The initial configuration will be generated with grand canonical particle additions, so a chemical potential is included, but will not contribute to canonical ensemble production simulations.\n",
    "\n",
    "In addition, [Metropolis](../plugin/monte_carlo/doc/Metropolis_arguments.rst) acceptance criteria is utilized."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "script+=\"\"\"\n",
    "ThermoParams beta {beta} chemical_potential0 -1\n",
    "Metropolis\n",
    "\"\"\".format(beta=1./0.9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A [TrialTranslate](../plugin/monte_carlo/doc/TrialTranslate_arguments.rst) is then introduced which attempts to translate a random particle by a random distance which is bound in each dimension by a `tunable_param`.\n",
    "This parameter may be adjusted to obtain a desired acceptance ratio, `tunable_target_acceptance`, with the help of [Tune](../plugin/steppers/doc/Tune_arguments.rst)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# FEASST version: v0.23.1-18-gb1bcd7c84e-dirty-user/234\n",
      "MonteCarlo\n",
      "RandomMT19937 seed 1572362164  \n",
      "# initializing random number generator with seed: 1572362164\n",
      "Configuration cubic_side_length 38.15714141844439 particle_type0 /home/user/feasst/particle/lj.fstprt  \n",
      "Potential Model LennardJones VisitModel VisitModelCell min_length max_cutoff  \n",
      "Potential VisitModel LongRangeCorrections  \n",
      "ThermoParams beta 1.1111111111111112 chemical_potential0 -1  \n",
      "Metropolis  \n",
      "TrialTranslate tunable_param 2 tunable_target_acceptance 0.2 weight 1  \n",
      "Tune  \n",
      " \n",
      " exit: 0\n"
     ]
    }
   ],
   "source": [
    "script+=\"\"\"\n",
    "TrialTranslate weight 1 tunable_param 2 tunable_target_acceptance 0.2\n",
    "Tune\n",
    "\"\"\"\n",
    "run(script)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[CheckEnergy](../plugin/steppers/doc/CheckEnergy_arguments.rst) asserts that the optimized energy calculations match the unoptimized calculations within a tolerance.\n",
    "Because the unoptimized energy calculation can be expensive, this check is only performed every `trials_per`.\n",
    "The line `set_variable name value` will replace any use of `name` in subsequent values, as shown in `script.log`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "script+=\"\"\"\n",
    "set_variable trials_per 1e4\n",
    "CheckEnergy trials_per_update trials_per decimal_places 8\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the help of [TrialAdd](../plugin/monte_carlo/doc/TrialTranslate_arguments.rst), we can now generate an initial configuration with a [Run](../plugin/monte_carlo/doc/Run_arguments.rst) until the desired number of particles are reached. [RemoveTrial](../plugin/monte_carlo/doc/RemoveTrial_arguments.rst) is then used to revert back to the canonical ensemble."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# FEASST version: v0.23.1-18-gb1bcd7c84e-dirty-user/234\n",
      "MonteCarlo\n",
      "RandomMT19937 seed 1572362164  \n",
      "# initializing random number generator with seed: 1572362164\n",
      "Configuration cubic_side_length 38.15714141844439 particle_type0 /home/user/feasst/particle/lj.fstprt  \n",
      "Potential Model LennardJones VisitModel VisitModelCell min_length max_cutoff  \n",
      "Potential VisitModel LongRangeCorrections  \n",
      "ThermoParams beta 1.1111111111111112 chemical_potential0 -1  \n",
      "Metropolis  \n",
      "TrialTranslate tunable_param 2 tunable_target_acceptance 0.2 weight 1  \n",
      "Tune  \n",
      "CheckEnergy decimal_places 8 trials_per_update 1e4  \n",
      "TrialAdd particle_type 0 weight 2  \n",
      "Run until_num_particles 500  \n",
      "RemoveTrial name TrialAdd  \n",
      " \n",
      " exit: 0\n"
     ]
    }
   ],
   "source": [
    "script+=\"\"\"\n",
    "TrialAdd weight 2 particle_type 0\n",
    "Run until_num_particles {num_particles}\n",
    "RemoveTrial name TrialAdd\n",
    "\"\"\".format(num_particles=num_particles)\n",
    "run(script)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The simulation is then [Run](../plugin/monte_carlo/doc/Run_arguments.rst) for a number of equilibration trials before [RemoveModify](../plugin/monte_carlo/doc/RemoveModify_arguments.rst) disables tuning of the maximum displacement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "script+=\"\"\"\n",
    "Run num_trials 1e5\n",
    "RemoveModify name Tune\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, it is time to obtain the ensemble average energy from a production simulation.\n",
    "First, a [Log](../plugin/steppers/doc/Log_arguments.rst) periodically outputs the instantaneous status of the trials, but it is more useful for watching the progress of a simulation than actually calculating quantities.\n",
    "Instead of analyzing the Log file, [Energy](../plugin/steppers/doc/Energy_arguments.rst) may be used to more precisely compute the average energy by accumulating its value after every trial.\n",
    "A trajectory in the XYZ format may also be produced using [Movie](../plugin/steppers/doc/Movie_arguments.rst).\n",
    "\n",
    "\n",
    "Additional [Analyze](../plugin/monte_carlo/doc/Analyze_arguments.rst) or [Modify](../plugin/monte_carlo/doc/Modify_arguments.rst) may be added to perform some task contingent upon the number of attempted trials."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# FEASST version: v0.23.1-18-gb1bcd7c84e-dirty-user/234\n",
      "MonteCarlo\n",
      "RandomMT19937 seed 1572362164  \n",
      "# initializing random number generator with seed: 1572362164\n",
      "Configuration cubic_side_length 38.15714141844439 particle_type0 /home/user/feasst/particle/lj.fstprt  \n",
      "Potential Model LennardJones VisitModel VisitModelCell min_length max_cutoff  \n",
      "Potential VisitModel LongRangeCorrections  \n",
      "ThermoParams beta 1.1111111111111112 chemical_potential0 -1  \n",
      "Metropolis  \n",
      "TrialTranslate tunable_param 2 tunable_target_acceptance 0.2 weight 1  \n",
      "Tune  \n",
      "CheckEnergy decimal_places 8 trials_per_update 1e4  \n",
      "TrialAdd particle_type 0 weight 2  \n",
      "Run until_num_particles 500  \n",
      "RemoveTrial name TrialAdd  \n",
      "Run num_trials 1e5  \n",
      "RemoveModify name Tune  \n",
      "Log output_file lj.txt trials_per_write 1e4  \n",
      "Energy output_file lj_en.txt trials_per_write 1e4  \n",
      "Movie output_file lj.xyz trials_per_write 1e4  \n",
      "Run num_trials 1e6  \n",
      " \n",
      " exit: 0\n"
     ]
    }
   ],
   "source": [
    "script+=\"\"\"\n",
    "Log trials_per_write trials_per output_file lj.txt\n",
    "Energy trials_per_write trials_per output_file lj_en.txt\n",
    "Movie trials_per_write trials_per output_file lj.xyz\n",
    "Run num_trials 1e6\n",
    "\"\"\"\n",
    "run(script)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compare the [average energy to the NIST SRSW](https://mmlapps.nist.gov/srs/LJ_PURE/mc.htm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "U_FEASST/N= -0.09030193615567321 +/- 0.00048147353358693576\n",
      "U_SRSW/N= -0.089936 +/- 2.44e-05\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df=pd.read_csv('lj_en.txt')\n",
    "print('U_FEASST/N=', df['average'][0]/num_particles, '+/-', df['block_stdev'][0]/num_particles)\n",
    "print('U_SRSW/N=', -8.9936E-02, '+/-', 2.44E-05)\n",
    "import math\n",
    "assert abs(-8.9936E-02-df['average'][0]/num_particles) < 3*math.sqrt(2.44E-05**2+(df['block_stdev'][0]/num_particles)**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should also find the `lj.xyz` trajectory file with an automatically-generated `lj.xyz.vmd` file for use with VMD (e.g., `vmd -e lj.xyz.vmd`).\n",
    "\n",
    "Did this tutorial work as expected? Did you find any inconsistencies or have any comments? Please [contact](../CONTACT.rst) us. Any feedback is appreciated!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
